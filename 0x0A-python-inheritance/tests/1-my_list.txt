The 1-my_list module
=====================

Using MyList
------------

Write a class MyList that inherits from list:

    * Public instance method: def print_sorted(self): that prints the list, but sorted (ascending sort)
    * You can assume that all the elements of the list will be of type int
    * You are not allowed to import any module

First, import the module:
    >>> MyList = __import__('1-my_list').MyList

Now test it in normal use case:
    >>> testlist = MyList([1, 2, 4, 3])
    >>> testlist
    [1, 2, 4, 3]
    >>> testlist.print_sorted()
    [1, 2, 3, 4]

Test already in order:
    >>> testlist = MyList([1, 2, 3, 4])
    >>> testlist
    [1, 2, 3, 4]
    >>> testlist.print_sorted()
    [1, 2, 3, 4]

Test in reverse order:
    >>> testlist = MyList([4, 3, 2, 1])
    >>> testlist
    [4, 3, 2, 1]
    >>> testlist.print_sorted()
    [1, 2, 3, 4]

Test with negatives:
    >>> testlist = MyList([3, -1, -10, 1])
    >>> testlist
    [3, -1, -10, 1]
    >>> testlist.print_sorted()
    [-10, -1, 1, 3]

Test with None:
    >>> testlist = MyList(None)
    Traceback (most recent call last):
    ...
    TypeError: 'NoneType' object is not iterable

Test with no input:
    >>> testlist = MyList()
    >>> testlist
    []
    >>> testlist.print_sorted()
    []

Test with empty list:
    >>> testlist = MyList([])
    >>> testlist
    []
    >>> testlist.print_sorted()
    []

Test with too many inputs:
    >>> testlist = MyList([1, 2, 3], [4, 5, 6])
    Traceback (most recent call last):
    ...
    TypeError: list expected at most 1 argument, got 2
