Importing add_integer function to doctest    
    >>> add_integer = __import__('0-add_integer').add_integer

Testing when a is not an integer
    >>> add_integer("hello", 98)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Testing when b is not an integer
    >>> add_integer(35, "World")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Testing a is an integer, b is not passed
    >>> add_integer(2)
    100

Testing a and b are negative
    >>> add_integer(-35, -40)
    -75

Testing if a float is passed to a
    >>> add_integer(5.4, 10)
    15

Testing very long float passed to b
    >>> add_integer(10, 0.98869039757839208585782092847592)
    10

Testing boolean value passed to a
    >>> add_integer(True, 5)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Testing for no values passed
    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Testing if string is typecasted as an integer
    >>> add_integer(1, int("World"))
    Traceback (most recent call last):
        ...
    ValueError: invalid literal for int() with base 10: 'World'

Testing if complex number is passed
    >>> add_integer(7j, 8)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Testing for infinity passed
    >>> add_integer(float('inf'), 2)
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

Testing for None passed
    >>> add_integer(None, 2)
    Traceback (most recent call last):
        ...
    TypeError: 'NoneType' object is not subscriptable
