The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Write a function that adds 2 integers.

Prototype: def add_integer(a, b=98):
a and b must be integers or floats, otherwise raise a TypeError exception with the message a must be an integer or b must be an integer
a and b must be first casted to integers if they are float
Returns an integer: the addition of a and b
You are not allowed to import any module

First import ``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

Adding two values:
    >>> add_integer(2, 2)
    4

Adding one value:
    >>> add_integer(2)
    100

Empty arguments:
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Adding floats:
    >>> add_integer(2.2, 102.000022)
    104

Adding negatives:
    >>> add_integer(-2, -2)
    -4

a is not an int or float:
    >>> add_integer("Hello World")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

b is not an int or float:
    >>> add_integer(2, "Hello World")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Adding negative floats:
    >>> add_integer(-100.5, -200.0003)
    -300

a is float, b is int:
    >>> add_integer(.999)
    98

b is float, a is int:
    >>> add_integer(2, 98.99999)
    100

Adding zeros:
    >>> add_integer(0, 0)
    0

    >>> a = float("inf")
    >>> b = 10
    >>> add_integer(a, b)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
